from datetime import datetime as dt
from datetime import date, timedelta
import plotly.graph_objs as go
from plotly.subplots import make_subplots
import numpy as np
import pandas as pd
import json
import os

#Import des données
"""
df_pc=pd.read_csv('data/data_pc.csv')
df_pc['dates'] = pd.to_datetime(df_pc['dates'],format='%Y-%m-%d')
#fonction de mise à  jour de la table
def update_first_datatable(start_date,end_date,type):
    if start_date is not None:
            start_date= dt.strptime(start_date, '%Y-%m-%d')
            start_date_string = start_date.strftime('%Y-%m-%d')
    if end_date is not None:
            end_date =dt.strptime(end_date, '%Y-%m-%d')
            end_date_string = end_date.strftime('%Y-%m-%d')
    if type=='defaut':
        data_df=df_pc[(df_pc['dates']>=start_date_string) & (df_pc['dates']<=end_date_string)]
    data_df['dates']=data_df['dates'].dt.date
    return data_df.to_dict("rows")
"""


######################## Fonction de mise à jour du graph (line et bar)  ########################
"""
def update_graph(start_date, end_date,type):
    if start_date is not None:
            start_date= dt.strptime(start_date, '%Y-%m-%d')
            start_date_string = start_date.strftime('%Y-%m-%d')
    if end_date is not None:
            end_date =dt.strptime(end_date, '%Y-%m-%d')
            end_date_string = end_date.strftime('%Y-%m-%d')

    if type=='trafic':
        data_df=df_pc[(df_pc['dates']>=start_date_string) & (df_pc['dates']<=end_date_string)]

    dict_graph={}
    for value in data_df.columns.to_list()[1:]:
        if '%' not in value:

            dict_graph[value]= go.Scatter(
              x=data_df.dates,
              y=data_df[value],
              text=value,
              name=value

            )


    fig = make_subplots(
      rows=1,
      cols=2,
      shared_xaxes=True,
      column_widths=[0.7, 0.3],
      subplot_titles=(								# Être sûr d'avoir le même nombre de titre que de ligne
        'Trafic détaillé par Appareil','Trafic résumé par type '
        ))

    for key, value in dict_graph.items():
        fig.add_traces(value, 1, 1)

    #################s######format data bar
    data_df['Phone']=data_df['android']+data_df['iphone_ipad']
    data_df['Pc']= data_df['autre_pc']+data_df['mac']
    data_df=data_df[['Phone','Pc']]
    labels=data_df.sum(axis=0).index.tolist()
    values= data_df.sum(axis=0).tolist()

    Bar=go.Bar(
        x=labels,
        y=values,
        marker={"color":[ "#97151c",'#D9CB04']},
        name="Device Use",
    )


    fig.add_trace(Bar, 1, 2)

#####################

    fig['layout'].update(

     paper_bgcolor = '#000406',
     font_color = "white"
      )
    updated_fig = fig


    return updated_fig
"""

def update_graph(model, affichage):
    
    # lecture des données json
    #path = "C:/Users/Enzop/OneDrive/Documents/GitHub/Exploitation_forestiere/Dashboard/data/"
    path = os.getcwd() + "\\data\\"
    file = path+model
        
    with open(file, 'r') as f:
      data = json.load(f)
      
    # paramètres utilisés (pour les afficher)
    len_gen = 52
    years = []
    mean_distrib = 10
    min_surf = 2
    max_it = 2
    forward_year = 200
    
    if affichage == "var":
        #title = "Model 2 - surfaces with a minimal surface of {}, a cut interval of {} years simulated on {} years".format(min_surf, max_it, forward_year)
        title = "Evolution de la surface à couper chaque année & variance"
        surf=[]
        for year in data:
            years.append(year)
            surf.append(sum(data[year]))

        fig = go.Figure()

        fig.add_trace(go.Bar(x=years, y=surf, marker_line_width=1.5, width=1, name='Distribution'))
        fig.add_trace(go.Scatter(x=years[:len(surf)-len_gen], y=[np.var(surf[k:k+len_gen]) for k in range(len(surf)-len_gen)], name='Variance'))
        fig.add_trace(go.Scatter(x=years, y=[mean_distrib for k in surf], name='Objectif'))
        fig.update_layout(title=title)
    
        return fig
    
    else :
        #title = "Model 2 - surfaces with a minimal surface of {}, a cut interval of {} years simulated on {} years".format(min_surf, max_it, forward_year)
        title = "Evolution de la surface à couper chaque année avec l'âge des arbres"
        surf = []
        for year in data:
            years.append(year)
            surf.append(data[year])
        surf=np.array(surf).reshape(len(years), 2*max_it+1)

            
        fig = go.Figure()

        for i in range(2*max_it+1):    
            fig.add_trace(go.Bar(x=years, y=surf[:, i], marker_line_width=1.5, width=1, name='Age de coupe : '+str(len_gen-i)))
            fig.update_layout(barmode='stack')
            fig.update_layout(title=title)
            
        return fig


###################Fin mise à jour graphique(line et bar)@###################

######################## Fonction de mise à jour du graph pie  ########################
"""
def update_pie(start_date, end_date,type):
    if start_date is not None:
            start_date= dt.strptime(start_date, '%Y-%m-%d')
            start_date_string = start_date.strftime('%Y-%m-%d')
    if end_date is not None:
            end_date =dt.strptime(end_date, '%Y-%m-%d')
            end_date_string = end_date.strftime('%Y-%m-%d')

    if type=='trafic':

        data_df=df_pc[(df_pc['dates']>=start_date_string) & (df_pc['dates']<=end_date_string)]

    data_df['Ios'] = data_df['iphone_ipad']+df_pc['mac']
    data_df=data_df[['Ios','android','autre_pc']]
    data_df.columns=['Ios','Android','Autre_Os']
    labels=data_df.sum(axis=0).index.tolist()
    values= data_df.sum(axis=0).tolist()

    fig = go.Figure(data=[go.Pie(labels=labels, values=values,hole=.7)])
    #

    fig.update_traces(
    name= "Os",
    marker=dict(colors=['gold', 'mediumturquoise'], line=dict(color='#000000', width=2)),
    hoverinfo ='label+name+percent',
    #textinfo='value'
    )

    fig['layout'].update(

    paper_bgcolor="#111111",
    font_color = "white",
    annotations=[{"font": {"size": 20},
    "text": "Accès par Os","y": 0.4}]
    #showlegend= Fals
    )
    final_fig=fig
    return final_fig
"""
######################## Fin de mise à jour du graph pie  ########################


def lancer_calcul(model, value1, value2, value3, value4, value5, value6, value7, value8, value9):
    
    #-------------------A MODIFIER AU PREMIER LANCEMENT----------------------------
    ProjectPath = os.getcwd()[:-10] #Chemin d'acces du projet

    Python_Syntaxe="py"  #mot clef pour lancer vos commandes python (peut être py ou autre)
    #-----------------------------------------------------------------------------
    
    modelPath={"model2":".\\Models\\mainModel2.py",
               "model3":".\\Models\\mainModel3.py",
               "model3bis":".\\Models\\mainModel3_bis.py",
               "model3pic":".\\Models\\mainModel3Pic.py",
               "modelcombination":".\\Models\\ModelsCombination.py",
               "ModelsCombinationSerie":".\\Models\\ModelsCombinationSerie.py",
               "ModelsCombinationPic":".\\Models\\ModelsCombinationPic.py",
               "CVXOPTmodel3":".\\CVXOPT\\mainModel3.py",
               "CVXOPTmodelcombination":".\\CVXOPT\\ModelsCombination.py",
               "CVXOPTModelsCombinationQuadratique":".\\CVXOPT\\ModelsCombination_quadratique.py",
               "CVXOPTModelsCombinationSerie":".\\CVXOPT\\ModelsCombinationSerie.py"
               }
    #clés des différents modèles

    #------------------------------------PARAMETRES--------------------------------
    forward_year = value1
    method = value2 #modifie le solveur du modèle 2 (0 pour le recuit simulé, 1 pour la manière déterministe ou 2 pour l'algorithme génétique), par défaut 0
    max_it = value3
    min_surf = value4
    max_iter = value5
    minimize_coupe_generation = value6
    age_cab = value7
    start_year = value8
    frequence = value9


    simulation = forward_year
    min_surface = min_surf
    delta = max_it

    model2_time = 110
    data_preprocessing = "optimise2"
    normalization = 1
    test_min_max = True
    #------------------------------------------------------------------------------

    path = modelPath[str(model)]
    cmd=''
    
    if path==".\\Models\\mainModel2.py":
        cmd = Python_Syntaxe+" -m virtualenv venv "+ " & "+"venv\\Scripts\\activate"+ " & "+"cd "+str(ProjectPath)+ " & "+"set PYTHONPATH=%PYTHONPATH%;"+str(ProjectPath)+ " & "+"python .\\Models\\mainModel2.py --forward_year "+str(forward_year)+" --model "+str(method)+" --max_it "+str(max_it)+" --min_surf "+str(min_surf)+" --max_iter "+str(max_iter)+" --minimize_coupe_generation "+str(minimize_coupe_generation)
    
    if path==".\\Models\\mainModel3.py":
        cmd = Python_Syntaxe+" -m virtualenv venv "+ " & "+"venv\\Scripts\\activate"+ " & "+"cd "+str(ProjectPath)+ " & "+"set PYTHONPATH=%PYTHONPATH%;"+str(ProjectPath)+ " & "+"python .\\Models\\mainModel3.py --simulation "+str(simulation)+" --delta "+str(delta)+" --min_surface "+str(min_surface)+" --age_cab "+str(age_cab)
    
    if path==".\\Models\\mainModel3_bis.py":
        cmd = Python_Syntaxe+" -m virtualenv venv "+ " & "+"venv\\Scripts\\activate"+ " & "+"cd "+str(ProjectPath)+ " & "+"set PYTHONPATH=%PYTHONPATH%;"+str(ProjectPath)+ " & "+"python .\\Models\\mainModel3_bis.py --simulation "+str(simulation)+" --delta "+str(delta)+" --min_surface "+str(min_surface)+" --age_cab "+str(age_cab)
    
    if path==".\\Models\\mainModel3Pic.py":
        cmd = Python_Syntaxe+" -m virtualenv venv "+ " & "+"venv\\Scripts\\activate"+ " & "+"cd "+str(ProjectPath)+ " & "+"set PYTHONPATH=%PYTHONPATH%;"+str(ProjectPath)+ " & "+"python .\\Models\\mainModel3pic.py --simulation "+str(simulation)+" --delta "+str(delta)+" --min_surface "+str(min_surface)+" --age_cab "+str(age_cab)
    
    if path==".\\Models\\ModelsCombination.py":
        cmd = Python_Syntaxe+" -m virtualenv venv "+ " & "+"venv\\Scripts\\activate"+ " & "+"cd "+str(ProjectPath)+ " & "+"set PYTHONPATH=%PYTHONPATH%;"+str(ProjectPath)+ " & "+"python .\\Models\\ModelsCombination.py --forward_year "+str(simulation)+" --start_year "+str(start_year)+" --age_cab "+str(age_cab)+" --model " +str(method)+" --max_it "+ str(max_it)+" --min_surf "+str(min_surf)+" --model2_time "+str(model2_time)
        
    if path==".\\Models\\ModelsCombinationSerie.py":
        cmd = Python_Syntaxe+" -m virtualenv venv "+ " & "+"venv\\Scripts\\activate"+ " & "+"cd "+str(ProjectPath)+ " & "+"set PYTHONPATH=%PYTHONPATH%;"+str(ProjectPath)+ " & "+"python .\\Models\\ModelsCombinationSerie.py --forward_year "+str(simulation)+" --start_year "+str(start_year)+" --age_cab "+str(age_cab)+" --model "+str(method)+" --max_it "+str(max_it)+" --min_surf "+str(min_surf)+" --frequence "+str(frequence)   
        
    if path==".\\Models\\ModelsCombinationPic.py":
        cmd = Python_Syntaxe+" -m virtualenv venv "+ " & "+"venv\\Scripts\\activate"+ " & "+"cd "+str(ProjectPath)+ " & "+"set PYTHONPATH=%PYTHONPATH%;"+str(ProjectPath)+ " & "+"python .\\Models\\ModelsCombinationPic.py --forward_year "+str(simulation)+" --start_year "+str(start_year)+" --age_cab "+str(age_cab)+" --model "+str(method)+" --max_it "+str(max_it)+" --min_surf "+str(min_surf) 
    
    if path==".\\CVXOPT\\mainModel3.py":
        cmd = Python_Syntaxe+" -m virtualenv venv "+ " & "+"venv\\Scripts\\activate"+ " & "+"cd "+str(ProjectPath)+ " & "+"set PYTHONPATH=%PYTHONPATH%;"+str(ProjectPath)+ " & "+"python .\\CVXOPT\\mainModel3.py --simulation "+str(simulation)+" --age_cab "+str(age_cab)+" --delta "+str(delta)+" --min_surface "+str(min_surf)
    
    if path==".\\CVXOPT\\ModelsCombination.py":
        cmd = Python_Syntaxe+" -m virtualenv venv "+ " & "+"venv\\Scripts\\activate"+ " & "+"cd "+str(ProjectPath)+ " & "+"set PYTHONPATH=%PYTHONPATH%;"+str(ProjectPath)+ " & "+"python .\\CVXOPT\\ModelsCombination.py --forward_year "+str(simulation)+" --start_year "+str(start_year)+" --age_cab "+str(age_cab)+" --model "+str(method)+" --delta "+str(delta)+" --min_surf "+str(min_surf)+" --model2_time "+str(model2_time)+" --data_preprocessing "+ str(data_preprocessing) +" --normalization "+str(normalization)  
    
    if path==".\\CVXOPT\\ModelsCombination_quadratique.py":
        cmd = Python_Syntaxe+" -m virtualenv venv "+ " & "+"venv\\Scripts\\activate"+ " & "+"cd "+str(ProjectPath)+ " & "+"set PYTHONPATH=%PYTHONPATH%;"+str(ProjectPath)+ " & "+"python .\\CVXOPT\\ModelsCombination_quadratique.py"+" --forward_year "+str(forward_year)+" --start_year "+str(start_year)+" --age_cab "+str(age_cab)+" --model "+str(method)+" --min_surf "+str(min_surf)+" --model2_time "+str(model2_time)+" --data_preprocessing "+ str(data_preprocessing) +" --normalization "+str(normalization)   
      
    if path==".\\CVXOPT\\ModelsCombinationSerie.py":
        cmd = Python_Syntaxe+" -m virtualenv venv "+ " & "+"venv\\Scripts\\activate"+ " & "+"cd "+str(ProjectPath)+ " & "+"set PYTHONPATH=%PYTHONPATH%;"+str(ProjectPath)+ " & "+"python .\\CVXOPT\\ModelsCombinationSerie.py"+" --forward_year "+str(forward_year)+" --start_year "+str(start_year)+" --age_cab "+str(age_cab)+" --model "+str(method)+" --min_surf "+str(min_surf)+" --test_min_max " + str(test_min_max) +" --data_preprocessing "+ str(data_preprocessing)

    return cmd