## Ce fichier contient des fonctions d'update qui servent à ajouter de l'interaction
## à la page Web (callbacks)

import json
from dash.dependencies import Input, Output, State
from app import app
from datetime import datetime as dt
from datetime import date, timedelta
from components.functions import update_graph
from components.functions import lancer_calcul

# Mise à jour de la sélection du menu déroulant
@app.callback(
    Output('dd-output-container', 'children'),
    Input('demo-dropdown', 'value')
)

def update_output(value):
    return f'You have selected {value}'

"""
#callback de mise à jour de la table de données à partir du sélécteur de date
@app.callback(Output('table', 'data'),
	[Input('my-date-picker-range-publishing', 'start_date'),
	 Input('my-date-picker-range-publishing', 'end_date')
     ])
def update_data_1(start_date, end_date):

	data_table = update_first_datatable(start_date, end_date,'defaut')
	return data_table
"""

#callback de mise à jour des graphs(line et bar) à partir des cases à cocher
@app.callback(
   Output('publishing', 'figure'),
   [Input('radio-button-publishing', 'value'), Input('demo-dropdown', 'value')])
def update_publishing(affichage, model):
    return update_graph(model, affichage)

"""
# callback de mise à jour du graph circulaire à partir des cases à cocher
@app.callback(
   Output('pieGraph', 'figure'),
   [Input('radio-button-publishing', 'value')])

def update_publishing(value):
    start_date=(df_pc['dates'].max() - timedelta(28)).date()
    start_date= dt.strftime(start_date, '%Y-%m-%d')
    end_date=df_pc['dates'].max().date()
    end_date= dt.strftime(end_date, '%Y-%m-%d')
    if value=='all':
        start_date=df_pc['dates'].min().date()
        start_date= dt.strftime(start_date, '%Y-%m-%d')
        end_date=df_pc['dates'].max().date()
        end_date= dt.strftime(end_date, '%Y-%m-%d')
        fig=update_pie(start_date, end_date,'trafic')
        return fig
    elif value=='trois_mois':
        end_date_obj= dt.strptime(end_date, '%Y-%m-%d')
        start_date=end_date_obj.date()-timedelta(92)
        start_date=start_date.strftime("%Y-%m-%d")
        fig = update_pie(start_date, end_date,'trafic')
        return fig
    elif value=='six_mois':
        end_date_obj= dt.strptime(end_date, '%Y-%m-%d')
        start_date=end_date_obj.date()-timedelta(186)
        start_date=start_date.strftime("%Y-%m-%d")
        fig = update_pie(start_date, end_date,'trafic')
        return fig
    elif value=='un_an':
        end_date_obj= dt.strptime(end_date, '%Y-%m-%d')
        start_date=end_date_obj.date()-timedelta(365)
        start_date=start_date.strftime("%Y-%m-%d")
        fig = update_pie(start_date, end_date,'trafic')
        return fig

    else:
	    fig = update_pie(start_date, end_date,'trafic')
	    return fig
"""

# Lancement du calcul d'un modèle
@app.callback(
    Output('hidden_div', 'children'),
    Input('button_calcul', 'value'),
    State('demo-dropdown', 'value'),
    State('input1', 'value'),
    State('input2', 'value'),
    State('input3', 'value'),
    State('input4', 'value'),
    State('input5', 'value'),
    State('input6', 'value'),
    State('input7', 'value'),
    State('input8', 'value'),
    State('input9', 'value')
)
def response(model, value1, value2, value3, value4, value5, value6, value7, value8, value9):
    return lancer_calcul(model, value1, value2, value3, value4, value5, value6, value7, value8, value9)