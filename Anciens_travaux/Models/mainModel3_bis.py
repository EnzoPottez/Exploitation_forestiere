from Model3_bis import Model3
from DataProcessing.DataProcessing import DataProcessing
import argparse
import json


"""
python .\Models\mainModel3.py [-h] [--simulation SIMULATION] [--delta DELTA] [--option]
                     [--min_surface MIN_SURFACE] [--saveresults SAVERESULTS]  

optional arguments:
  -h, --help            show this help message and exit
  --simulation SIMULATION
                        Durée en année de la simulation
  --delta DELTA         Définie l'intervale d'age de coupe à 50 ans + ou -
                        delta
  --option              Active l'option permettant de replanter avec un délais
                        de 1 année si nécessaire
  --min_surface MIN_SURFACE
                        Définie la surface minimale de coupe
  --saveresults SAVERESULTS
                        Active ou non l'écriture des résultats de
                        l'optimisation dans le dossier Result/PlanDeCoupe

"""


DEFAULT_SIMULATION = 400
DEFAULT_AGE_CAB = 52
DEFAULT_DELTA = 2
DEFAULT_OPTION = False
DEFAULT_MINSURFACE = 0.1
DEFAULT_SAVE_RESULTS = True


def main():

    dataProcessing = DataProcessing(args.age_cab, 0,"./Data/simu.json")
    data = dataProcessing.parcelles_cpt[-args.age_cab:]
    model = Model3(data=data,
                   simulationTime=args.simulation,
                   delta=args.delta,
                   age_cab=args.age_cab,
                   plantOption=args.option,
                   min_surface=args.min_surface,
                   saveResults=args.saveresults)

    model.runSimulation()

    historic_decoupe = {}
    for i in range(model.simulationTime):
        historic_decoupe[str(2021 + i)] = list(model.distrib_historic[i])

    with open("Result/HistoricDecoupe/Model3-Result.json", "w") as json_file:
        json.dump(historic_decoupe, json_file)

    print("Historique des découpes enregistrés dans le fichier " +
          "Result/HistoricDecoupe/Model3-Result.json")

    model.plotresult("Result/Model3/Model3")

    print("Graphique des distributions et variance enregistré dans le fichier " +
          "Model3.html")

    model.plot_distribution_surfaces("Result/Model3/Model3-Distrib")

    print("Graphique des distributions et décalages enregistré dans le fichier " +
          "Model3-distrib.html")

    with open("Result/ModelComparison/Model3-Result.txt", "w") as txtfile:
        txtfile.write(",".join([str(elt) for elt in model.result]))

    print("Distribution des surfaces enregistrées dans le fichier " +
          "Result/ModelComparison/Model3-Result.txt")
    


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("--simulation", default=DEFAULT_SIMULATION,
                        type=int, help='Durée en année de la simulation')
    parser.add_argument("--age_cab", default=DEFAULT_AGE_CAB,
                        type=int, help='Age de coupe à blanc')
    parser.add_argument("--delta", default=DEFAULT_DELTA, type=int,
                        help="Définie l'intervale d'age de coupe à 50 ans + ou - delta")
    parser.add_argument("--option", default=False, action="store_true",
                        help="Active l'option permettant de replanter avec un délais de 1 année si nécessaire")
    parser.add_argument("--min_surface", default=DEFAULT_MINSURFACE,
                        type=float, help="Définie la surface minimale de coupe")
    parser.add_argument("--saveresults", default=DEFAULT_SAVE_RESULTS,
                        help="Active ou non l'écriture des résultats de l'optimisation dans le dossier Result/PlanDeCoupe")

    global args
    args = parser.parse_args()
    main()
