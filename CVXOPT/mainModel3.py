from Model3 import Model3
from DataProcessing.DataProcessing import DataProcessing
import argparse
import json
import numpy as np


"""
python .CVXOPT\resultats\mainModel3.py [-h] [--simulation SIMULATION] [--delta DELTA] [--option]
                     [--min_surface MIN_SURFACE] [--saveresults SAVERESULTS]  

optional arguments:
  -h, --help            show this help message and exit
  --simulation SIMULATION 
                        Durée en année de la simulation
  
  --age_cab             Age de coupe à blanc standart pour la simulation,
                        par défault 52ans
  --data_preprocessing  Type de traitement sur les données en entrée. 
                        Valeurs possibles:None, 'pic'(tous les arbres anciens à la même date), ou 'optimise1'/'optimise2' (les arbres anciens dans les trous)

  --delta DELTA         Définie l'intervale d'age de coupe à 50 ans + ou -
                        delta
  --option              Active l'option permettant de replanter avec un délais
                        de 1 année si nécessaire
  --min_surface MIN_SURFACE
                        Définie la surface minimale de coupe
  --saveresults SAVERESULTS
                        Active ou non l'écriture des résultats de
                        l'optimisation dans le dossier Result/PlanDeCoupe
  --data_preprocessing  modifie la stratégie pour gérer les arbres anciens 
                        (avec un âge supérieur à âge_cab), voir plus bas pour le 
                        détail des stratégies, par default 'optimise2'

"""


default_simulation = 400
default_age_cab = 52
default_data_preprocessing = 'optimise2'
default_delta = 2
default_option = False
default_min_surface = 0.1
default_save_results = True


def main():

    dataProcessing = DataProcessing(args.age_cab, args.delta, "./Data/simu.json")
    
    if args.data_preprocessing == None :
        data = dataProcessing.parcelles_cpt

    if args.data_preprocessing == 'pic':   
        data = dataProcessing.parcelles_ancien_pic()
    
    if args.data_preprocessing == 'optimise1':
        
        # stratégie d'optimisation initiale numéro 1: on remplit les 'trous'
        # (valeur de l'année<moy) avec les arbres anciens, et tant qu'on n'a pas dépassé la moyenne
        #Une fois qu'on a dépassé la moyenne, on avance jusqu'au prochain trou
        # On ne se fixe pas d'année de décalage maximum.
        
        data = dataProcessing.parcelles_ancien_optimise1()        

        
    if args.data_preprocessing == 'optimise2':        
        # stratégie d'optimisation initiale numéro 2: on cherche l'année de valeur minimale 
        # dans la portée de limit_decal, et on y ajoute la parcelle la plus grande.
        # On recommence l'opération jusqu'à ce qu'on ait placé tous les arbres anciens
        
        
        limit_decal= 10  #limit_decal correspond au nombre d'années max 
        #pour le retard des vieux arbres dans la stratégie d'optimisation initiale 

       
        data= dataProcessing.parcelles_ancien_optimise2(limit_decal)
     
    model = Model3(data=data,
                   simulationTime=args.simulation,
                   delta=args.delta,
                   age_cab=args.age_cab,
                   plantOption=args.option,
                   min_surface=args.min_surface,
                   saveResults=args.saveresults)

    model.runSimulation()

    historic_decoupe = {}
    for i in range(model.simulationTime):
        historic_decoupe[str(2021 + i)] = list(model.distrib_historic[i])

    with open("CVXOPT/resultats/Model3-Result.json", "w") as json_file:
        json.dump(historic_decoupe, json_file)
        
    # Sauvegarde pour le dashboard
    with open("Dashboard/data/CVXOPTmodel3.json", "w") as json_file:
        json.dump(historic_decoupe, json_file)

    print("Historique des découpes enregistrés dans le fichier " +
          "CVXOPT/resultats/Model3-Result.json")

    model.plotresult("CVXOPT/resultats/Model3")

    print("Graphique des distributions et variance enregistré dans le fichier " +
          "Model3.html")

    model.plot_distribution_surfaces("CVXOPT/resultats/Model3-Distrib")

    print("Graphique des distributions et décalages enregistré dans le fichier " +
          "Model3-distrib.html")

    with open("CVXOPT/resultats/Model3-Result.txt", "w") as txtfile:
        txtfile.write(",".join([str(elt) for elt in model.result]))

    print("Distribution des surfaces enregistrées dans le fichier " +
          "CVXOPT/resultats/Model3-Result.txt")
    


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("--simulation", default=default_simulation,
                        type=int, help='Durée en année de la simulation')
    parser.add_argument("--age_cab", default=default_age_cab,
                        type=int, help='Age de coupe à blanc')
    parser.add_argument("--data_preprocessing", default=default_data_preprocessing,
                        type=str, help="Traitement sur les données d'entrée")
    parser.add_argument("--delta", default=default_delta, type=int,
                        help="Définie l'intervale d'age de coupe à 50 ans + ou - delta")
    parser.add_argument("--option", default=False, action="store_true",
                        help="Active l'option permettant de replanter avec un délais de 1 année si nécessaire")
    parser.add_argument("--min_surface", default=default_min_surface,
                        type=float, help="Définie la surface minimale de coupe")
    parser.add_argument("--saveresults", default=default_save_results,
                        help="Active ou non l'écriture des résultats de l'optimisation dans le dossier Result/PlanDeCoupe")

    global args
    args = parser.parse_args()
    main()
