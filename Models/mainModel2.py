import json
import numpy as np
from Model2 import Model2
from DataProcessing.DataProcessing import DataProcessing
import argparse


"""
python .\Models\mainModel2.py --forward_year 400 --model 0 --max_it 2 --min_surf 0.01 --max_iter 300000 --minimize_coupe_generation 5 


python .\Models\mainModel2.py [-h] [--forward_year FORWARD_YEAR] [--model MODEL]
                     [--max_it MAX_IT] [--min_surf MIN_SURF]
                     [--max_iter MAX_ITER]
                     [--minimize_coupe_generation MINIMIZE_COUPE_GENERATION]

optional arguments:
  -h, --help            show this help message and exit
  --forward_year FORWARD_YEAR, -fy FORWARD_YEAR
                        modifie le nombre d'année sur lequel lancer
                        l'optimisation, par défaut 400 years
  --model MODEL, -m MODEL
                        modifie le solveur du modèle (0 pour le recuit simulé,
                        1 pour la manière déterministe ou 2 pour l'algorithme
                        génétique), par défaut 0
  --max_it MAX_IT, -it MAX_IT
                        modifie l'intervalle maximal de décalage de la coupe à
                        blanc, en année, par défaut 2 years
  --min_surf MIN_SURF, -ms MIN_SURF
                        modifie la surface minimale de coupe autorisé, en
                        hectare, par défaut 0.01 hectares
  --max_iter MAX_ITER, -iter MAX_ITER
                        modifie le nombre d'itérations maximal pour
                        l'algorithme de recuit simulé, par défaut 300000
  --minimize_coupe_generation MINIMIZE_COUPE_GENERATION, -mcg MINIMIZE_COUPE_GENERATION
                        Generation à partir de laquel limiter les décalages,
                        par défaut 5
 --save_results SAVE_RESULTS, -sr SAVE_RESULTS
                        Active ou non (True ou False) l'écriture des résultats
                        de l'optimisation dans le dossier Result/PlanDeCoupe,
                        activé par défaut

"""


default_model = 0
default_age_cab = 52
default_forward_year = 400
default_max_it = 2
default_min_surf = 0.01  # surface minimal de coupe
default_max_iter = 300000
default_minimize_coupe_generation = 5  # 3
default_save_results = True

# Initiate the parser
parser = argparse.ArgumentParser()

# Add long and short argument
parser.add_argument("--forward_year", "-fy", default=default_forward_year,
                    help="modifie le nombre d'année sur lequel lancer l'optimisation, par défaut " + str(default_forward_year) + " années")
parser.add_argument("--age_cab", "-ac", default=default_age_cab,
                    help="modifie l'age de coupe à blanc, par défaut " + str(default_age_cab) + " années")
parser.add_argument(
    "--model", "-m", default=default_model,  help="modifie le solveur du modèle (0 pour le recuit simulé, 1 pour la manière déterministe ou 2 pour l'algorithme génétique), par défaut " + str(default_model))
parser.add_argument(
    "--max_it", "-it", default=default_max_it,  help="modifie l'intervalle maximal de décalage de la coupe à blanc, en année, par défaut " + str(default_max_it) + " années")
parser.add_argument("--min_surf", "-ms", default=default_min_surf,
                    help="modifie la surface minimale de coupe autorisé, en hectare, par défaut " + str(default_min_surf) + " hectares")
parser.add_argument("--max_iter", "-iter", default=default_max_iter,
                    help="modifie le nombre d'itérations maximal pour l'algorithme de recuit simulé, par défaut " + str(default_max_iter))
parser.add_argument("--minimize_coupe_generation", "-mcg", default=default_minimize_coupe_generation,
                    help="Generation à partir de laquel limiter les décalages, par défaut " + str(default_minimize_coupe_generation))
parser.add_argument(
    "--save_results", "-sr", default=default_save_results,  help="Active ou non (True ou False) l'écriture des résultats de l'optimisation dans le dossier Result/PlanDeCoupe, activé par défaut")


# Read arguments from the command line
args = parser.parse_args()


print(args)

forward_year = int(args.forward_year)
age_cab = int(args.age_cab)
model = int(args.model)
max_it = int(args.max_it)
min_surf = float(args.min_surf)
max_iter = int(args.max_iter)
minimize_coupe_generation = int(args.minimize_coupe_generation)
save_results = bool(args.save_results)

type_model = ["Model2-RecuitSimule",
              "Model2-Deterministe", "Model2-Genetic"][model]

dataProcessing = DataProcessing(52, 0 ,"./Data/simu.json")

model2 = Model2(dataProcessing.parcelles_cpt[-age_cab:], dataProcessing.years[-age_cab:], type_model, forward_year=forward_year, age_cab=age_cab, max_it=max_it, min_surf=min_surf, max_iter=max_iter, minimize_coupe_generation=minimize_coupe_generation, save_results=save_results)

#model2 = Model2(list(dataProcessing.parcelles_cpt.values())[
#    0][-age_cab:], dataProcessing.years[-age_cab:], type_model, forward_year=forward_year, age_cab=age_cab, max_it=max_it, min_surf=min_surf, max_iter=max_iter, minimize_coupe_generation=minimize_coupe_generation, save_results=save_results)

model2.optimize()

model2.plot_surfaces(model2.modif_surfaces,
                     name="Result/"+type_model+"/"+type_model,
                     title="Model 2 - surfaces with a minimal surface of {}, a cut interval of {} years simulated on {} years".format(min_surf, max_it, forward_year))

print("Graphique des distributions et variance enregistré dans le fichier " +
      "Result/"+type_model+"/"+type_model+".html")

model2.plot_distribution_surfaces(model2.distrib_historic,
                                  name="Result/"+type_model+"/"+type_model+"-distrib",
                                  title="Model 2 - surfaces distribution with a minimal surface of {}, a cut interval of {} years simulated on {} years".format(min_surf, max_it, forward_year))

print("Graphique des distributions et décalages enregistré dans le fichier " +
      "Result/"+type_model+"/"+type_model+"-distrib.html")

historic_decoupe = {}
for i in range(model2.distrib_historic.shape[0]):
    historic_decoupe[model2.years[i]] = list(model2.distrib_historic[i])


with open("Result/HistoricDecoupe/" + type_model + "-Result.json", "w") as json_file:
    json.dump(historic_decoupe, json_file)
    
# Sauvegarde pour le dashboard
with open("Dashboard/data/" + type_model + ".json", "w") as json_file:
    json.dump(historic_decoupe, json_file)

print("Historique des découpes enregistrés dans le fichier " +
      "Result/HistoricDecoupe/" + type_model + "-Result.json")

with open("Result/ModelComparison/" + type_model + "-Result.txt", "w") as txtfile:
    txtfile.write(",".join([str(elt) for elt in model2.modif_surfaces]))

print("Distribution des surfaces enregistrées dans le fichier " +
      "Result/ModelComparison/" + type_model + "-Result.txt")
