from Model3 import Model3
from DataProcessing.DataProcessing import DataProcessing
import argparse
import json


"""
python .\Models\mainModel3.py [-h] [--simulation SIMULATION] [--delta DELTA] [--option]
                     [--min_surface MIN_SURFACE] [--saveresults SAVERESULTS]  

optional arguments:
  -h, --help            show this help message and exit
  --simulation SIMULATION
                        Durée en année de la simulation
  --delta DELTA         Définie l'intervale d'age de coupe à 50 ans + ou -
                        delta
  --option              Active l'option permettant de replanter avec un délais
                        de 1 année si nécessaire
  --min_surface MIN_SURFACE
                        Définie la surface minimale de coupe
  --saveresults SAVERESULTS
                        Active ou non l'écriture des résultats de
                        l'optimisation dans le dossier Result/PlanDeCoupe

"""


DEFAULT_SIMULATION = 400
DEFAULT_AGE_CAB = 52
DEFAULT_DELTA = 2
DEFAULT_OPTION = False
DEFAULT_MINSURFACE = 0.1
DEFAULT_SAVE_RESULTS = True


def main():

    dataProcessing = DataProcessing(args.age_cab,0,"./Data/simu.json")
    data0 = dataProcessing.parcelles_cpt[-args.age_cab:]
    
    imax = data0.index(max(data0))
    
    for m in [20,25,30,35,40,45,50]:
        
        #on change la valeur du pic le plus grand
        data = data0.copy()        
        data[imax] = m
                
            
        model = Model3(data=data,
                       simulationTime=args.simulation,
                       delta=args.delta,
                       age_cab=args.age_cab,
                       plantOption=args.option,
                       min_surface=args.min_surface,
                       saveResults=args.saveresults)
    
        model.runSimulation()
        
        model.plotresult("Result/Model3/Model3withMax="+str(m))
    
        print("Graphique des distributions et variance enregistré dans le fichier " +
              "Model3.html")
    
        model.plot_distribution_surfaces("Result/Model3/Model3-DistribwithMax="+str(m))
    
        print("Graphique des distributions et décalages enregistré dans le fichier " +
              "Model3-distrib.html")

    


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("--simulation", default=DEFAULT_SIMULATION,
                        type=int, help='Durée en année de la simulation')
    parser.add_argument("--age_cab", default=DEFAULT_AGE_CAB,
                        type=int, help='Age de coupe à blanc')
    parser.add_argument("--delta", default=DEFAULT_DELTA, type=int,
                        help="Définie l'intervale d'age de coupe à 50 ans + ou - delta")
    parser.add_argument("--option", default=False, action="store_true",
                        help="Active l'option permettant de replanter avec un délais de 1 année si nécessaire")
    parser.add_argument("--min_surface", default=DEFAULT_MINSURFACE,
                        type=float, help="Définie la surface minimale de coupe")
    parser.add_argument("--saveresults", default=DEFAULT_SAVE_RESULTS,
                        help="Active ou non l'écriture des résultats de l'optimisation dans le dossier Result/PlanDeCoupe")

    global args
    args = parser.parse_args()
    main()
