import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import argparse


"""

python .\Result\ModelComparison\modelComparison.py [-h] [--age_cab AGE_CAB] [--models MODELS]


optional arguments:
  -h, --help            show this help message and exit
  --age_cab AGE_CAB, -ac AGE_CAB
                        modifie l'age de coupe à blanc, par défaut 52 années
  --start_year START_YEAR, -sy START_YEAR
                        modifie l'année de départ du lancement de
                        l'optimisation, par défaut 2021
  --models MODELS, -mo MODELS
                        modifie les modèles à comparer, par défaut
                        Model2-RecuitSimule, Model2-Genetic, Model3,
                        ModelsCombination. Veillez à renseigner les modèles en
                        les séparant par une virgule ','
                        
"""

default_age_cab = 52
default_models = ["Model2-RecuitSimule", "Model2-Genetic",
                  "Model3", "ModelsCombination"]
default_start_year = 2021

# Initiate the parser
parser = argparse.ArgumentParser()

# Add long and short argument
parser.add_argument("--age_cab", "-ac",
                    default=default_age_cab,
                    help="modifie l'age de coupe à blanc, par défaut " + str(default_age_cab) + " années")
parser.add_argument("--start_year", "-sy",
                    default=default_start_year,
                    help="modifie l'année de départ du lancement de l'optimisation, par défaut " + str(default_start_year))
parser.add_argument("--models", "-mo",
                    help="modifie les modèles à comparer, par défaut " + ", ".join(default_models) + ". Veillez à renseigner les modèles en les séparant par une virgule ','")


# Read arguments from the command line
args = parser.parse_args()

models = default_models

print(args)

if args.models:
    models = args.models.split(",")
    print("models : ", args.models.split(","))

age_cab = int(args.age_cab)
start_year = int(args.start_year)


def plot_surfaces(years, modelsData, age_cab, models, name="Result/ModelComparison/modelComparison"):
    colors = ["blue", "red", "green", "magenta", "cyan"]
    fig = make_subplots(specs=[[{"secondary_y": True}]])
    for i in range(len(modelsData)):
        model = modelsData[i]
        fig.add_trace(go.Bar(x=years, y=model,
                             marker_line_width=1.5, width=1, marker_color=colors[i], name=models[i]))
        fig.add_trace(go.Scatter(x=years[:len(years)-age_cab], y=[np.var(
            model[k:k+age_cab]) for k in range(len(model)-age_cab)], mode='lines', line=dict(color=colors[i]), name='Variance ' + models[i]), secondary_y=True)
    fig.update_xaxes(title_text="Années")
    fig.update_yaxes(title_text="<b>Surface</b> ", secondary_y=False)
    fig.update_yaxes(title_text="<b>Variance</b> ", secondary_y=True)

    fig.write_html(name + ".html")

    return


def read_model_results(models, start_year=2021):
    modelsData = []
    for model in models:
        with open("Result/ModelComparison/" + model + ".txt", "r") as modelFile:
            modelsData.append([float(elt)
                               for elt in modelFile.read().strip().split(',')])
    minLength = min([len(model) for model in modelsData])
    years = [start_year+k for k in range(minLength)]
    return years, modelsData


(years, modelsData) = read_model_results(
    [elt + "-Result" for elt in models], start_year)

plot_surfaces(years, modelsData, age_cab, models)
